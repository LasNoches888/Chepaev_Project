#include "gamewidget.h"
#include <QPainter>
#include <QMouseEvent>
#include <QRandomGenerator>
#include <QDebug>
#include <algorithm>
#include <cmath>

GameWidget::GameWidget(QWidget *parent)
    : QWidget(parent),
    logic(),
    gameTimer(this),
    dragging(false),
    playerTurn(true),
    selectedChecker(-1),
    menuButtonHovered(false),
    difficulty(Medium)
{
    setMinimumSize(600, 600);
    setMouseTracking(true);

    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ–Ω (—Ç–æ—Ç –∂–µ —Ä–µ—Å—É—Ä—Å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–µ–Ω—é)
    bgPixmap = QPixmap(":/images/menu_bg.jpg");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é/–¥–æ—Å–∫—É
    updateBoardGeometry();
    // initBoard –≤—ã–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ –¥–æ—Å–∫–∞ –ø—É—Å—Ç–∞)
    logic.initBoard();

    connect(&gameTimer, &QTimer::timeout, this, &GameWidget::onFrame);
    gameTimer.start(16); // ~60 FPS

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∏–∫–µ
    logic.setBotDifficulty(static_cast<BotDifficulty>(difficulty));
}

QSize GameWidget::sizeHint() const
{
    return QSize(800, 800);
}

void GameWidget::setBotDifficulty(Difficulty d)
{
    difficulty = d;
    logic.setBotDifficulty(static_cast<BotDifficulty>(d));
}

void GameWidget::updateBoardGeometry()
{
    int w = width();
    int h = height();
    int minSide = qMin(w, h);
    int newBoardSize = qMax(400, static_cast<int>(minSide * 0.8));

    // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    int newBoardLeft = (w - newBoardSize) / 2;
    int newBoardTop = (h - newBoardSize) / 2;

    // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏ —à–∞—à–∫–∏ –Ω–µ –¥–≤–∏–∂—É—Ç—Å—è:
    // - –µ—Å–ª–∏ –¥–æ—Å–∫–∞ –ø—É—Å—Ç–∞ (–∏–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞) -> initBoard()
    // - –µ—Å–ª–∏ —à–∞—à–∫–∏ —É–∂–µ –µ—Å—Ç—å -> –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ, –∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
    if (std::abs(logic.boardSize - newBoardSize) > 50.0f && !logic.isMoving()) {
        logic.boardLeft = newBoardLeft;
        logic.boardTop = newBoardTop;
        logic.boardSize = newBoardSize;

        // –ï—Å–ª–∏ –µ—â—ë –Ω–µ—Ç —à–∞—à–µ–∫ (–Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã) ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        if (logic.getCheckerCount() == 0) {
            logic.initBoard();
        } else {
            // –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —à–∞—à–∫–∏ –ø–æ –∏—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            logic.updateCheckerPositions();
        }
    } else {
        logic.boardLeft = newBoardLeft;
        logic.boardTop = newBoardTop;
        logic.boardSize = newBoardSize;
    }

    qDebug() << "–ì–µ–æ–º–µ—Ç—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –û–∫–Ω–æ:" << w << "x" << h;
    qDebug() << "–î–æ—Å–∫–∞:" << logic.boardLeft << logic.boardTop << logic.boardSize;
}

void GameWidget::paintEvent(QPaintEvent *)
{
    QPainter p(this);
    p.setRenderHint(QPainter::Antialiasing, true);

    // –†–∏—Å—É–µ–º —Ñ–æ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Å—É—Ä—Å) ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ–Ω, –∑–∞—Ç–µ–º –¥–æ—Å–∫–∞
    if (!bgPixmap.isNull()) {
        p.drawPixmap(rect(), bgPixmap);
    } else {
        p.fillRect(rect(), QColor(44, 62, 80));
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π (–Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞)
    updateBoardGeometry();

    // –†–∏—Å—É–µ–º –¥–æ—Å–∫—É –∏ —à–∞—à–∫–∏ —á–µ—Ä–µ–∑ GameLogic
    logic.drawBoard(&p);

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI: —Å—á—ë—Ç, –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ö–æ–¥–∞ –∏ –ª–∏–Ω–∏—è –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
    int whiteCount = logic.getWhiteCheckers().size();
    int blackCount = logic.getBlackCheckers().size();

    // –ü–∞–Ω–µ–ª—å —Å—á—ë—Ç–∞
    p.setPen(Qt::NoPen);
    p.setBrush(QColor(0, 0, 0, 160));
    p.drawRoundedRect(10, 10, 220, 72, 8, 8);

    p.setPen(Qt::white);
    p.setFont(QFont("Arial", 12, QFont::Bold));
    p.setBrush(Qt::white);
    p.drawEllipse(20, 28, 18, 18);
    p.drawText(50, 43, QString::fromUtf8("–ë–µ–ª—ã–µ: %1").arg(whiteCount));

    p.setBrush(Qt::black);
    p.drawEllipse(20, 50, 18, 18);
    p.setPen(Qt::white);
    p.drawText(50, 65, QString::fromUtf8("–ß–µ—Ä–Ω—ã–µ: %1").arg(blackCount));

    // –ö–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é"
    QRect menuButtonRect(width() - 140, 12, 128, 40);
    p.setPen(Qt::NoPen);
    p.setBrush(menuButtonHovered ? QColor(255,255,255,250) : QColor(255,255,255,220));
    p.drawRoundedRect(menuButtonRect, 8, 8);
    p.setPen(Qt::black);
    p.setFont(QFont("Arial", 12, QFont::Bold));
    p.drawText(menuButtonRect, Qt::AlignCenter, QString::fromUtf8("–í –º–µ–Ω—é"));

    // –õ–∏–Ω–∏—è –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ç—è–Ω–µ—Ç)
    if (dragging && selectedChecker >= 0 && logic.isCheckerAlive(selectedChecker)) {
        QPointF checkerPos = logic.getCheckerPosition(selectedChecker);
        p.setPen(QPen(Qt::red, 3, Qt::SolidLine, Qt::RoundCap));
        p.drawLine(checkerPos, currentMouse);

        QPointF direction = currentMouse - checkerPos;
        float length = std::hypot(direction.x(), direction.y());
        if (length > 0) {
            QPointF unitDir = direction / length;
            QPointF perpendicular(-unitDir.y(), unitDir.x());

            QPointF arrow1 = currentMouse - unitDir * 20 + perpendicular * 8;
            QPointF arrow2 = currentMouse - unitDir * 20 - perpendicular * 8;

            p.drawLine(currentMouse, arrow1);
            p.drawLine(currentMouse, arrow2);
        }
    }

    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ö–æ–¥–∞
    QString turnText = playerTurn ? QString::fromUtf8("üéØ –í–∞—à —Ö–æ–¥ (–±–µ–ª—ã–µ)") : QString::fromUtf8("ü§ñ –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (—á–µ—Ä–Ω—ã–µ)");
    QRect turnRect(width() / 2 - 160, height() - 70, 320, 44);
    p.setPen(Qt::NoPen);
    p.setBrush(QColor(0,0,0,160));
    p.drawRoundedRect(turnRect, 10, 10);
    p.setPen(Qt::white);
    p.setFont(QFont("Arial", 14, QFont::Bold));
    p.drawText(turnRect, Qt::AlignCenter, turnText);
}

void GameWidget::mousePressEvent(QMouseEvent *e)
{
    if (e->button() != Qt::LeftButton) return;

    QRect menuButtonRect(width() - 140, 12, 128, 40);
    if (menuButtonRect.contains(e->pos())) {
        emit backToMenuClicked();
        return;
    }

    if (!playerTurn || logic.isMoving()) return;

    selectedChecker = -1;
    const float cell = logic.boardSize / 8.0f;
    const float radius = cell * 0.4f;

    const auto& checkers = logic.getCheckers();
    for (int i = 0; i < checkers.size(); ++i) {
        const auto& c = checkers[i];
        if (!c->alive || c->color != Qt::white) continue;

        float dist = std::hypot(e->pos().x() - c->pos.x(), e->pos().y() - c->pos.y());
        if (dist <= radius) {
            selectedChecker = i;
            break;
        }
    }

    if (selectedChecker >= 0) {
        dragging = true;
        dragStart = logic.getCheckerPosition(selectedChecker);
        currentMouse = e->pos();
        update();
    }
}

void GameWidget::mouseMoveEvent(QMouseEvent *e)
{
    QRect menuButtonRect(width() - 140, 12, 128, 40);
    bool wasHovered = menuButtonHovered;
    menuButtonHovered = menuButtonRect.contains(e->pos());
    if (wasHovered != menuButtonHovered) update();

    if (dragging && selectedChecker >= 0) {
        currentMouse = e->pos();
        update();
    }
}

void GameWidget::mouseReleaseEvent(QMouseEvent *e)
{
    if (e->button() != Qt::LeftButton) return;
    if (!(dragging && selectedChecker >= 0)) return;

    dragging = false;

    QPointF checkerPos = logic.getCheckerPosition(selectedChecker);
    QPointF direction = checkerPos - e->pos();

    // –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–∏–ª–∞ –∏–≥—Ä–æ–∫–∞ + –ø—Ä–µ–¥–µ–ª—ã
    const float PLAYER_FORCE_MULT = 3.0f;
    const float MAX_FORCE = 450.0f;
    QPointF rawForce = direction * PLAYER_FORCE_MULT;
    float len = std::hypot(rawForce.x(), rawForce.y());
    if (len > MAX_FORCE) rawForce *= (MAX_FORCE / len);

    const float MIN_FORCE = 10.0f;
    if (len >= MIN_FORCE) {
        logic.shoot(selectedChecker, rawForce);
        playerTurn = false; // –ø–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥ –±–æ—Ç—É
    }

    selectedChecker = -1;
    update();
}

void GameWidget::resizeEvent(QResizeEvent *event)
{
    Q_UNUSED(event);
    updateBoardGeometry();
    update();
}

void GameWidget::onFrame()
{
    // –§–∏–∑–∏—á–µ—Å–∫–∏–π —à–∞–≥
    logic.update(0.016f);

    // –ï—Å–ª–∏ —à–∞—à–∫–∏ –≤—Å—ë –µ—â—ë –¥–≤–∏–≥–∞—é—Ç—Å—è ‚Äî –∂–¥—ë–º
    if (logic.isMoving()) {
        update();
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
    if (logic.checkGameOver()) {
        QString w = logic.winner();
        if (w != "none") emit gameEnded(w);
        return;
    }

    // –•–æ–¥ –±–æ—Ç–∞ –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –∑–∞ –Ω–∏–º
    if (!playerTurn) {
        makeBotMove();
    }

    update();
}

// makeBotMove –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –≤ –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–≤—ã–∑–æ–≤ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞ –∑–∞—Ç–µ–º shoot + playerTurn = true)
void GameWidget::makeBotMove()
{
    if (playerTurn || logic.isMoving() || logic.checkGameOver()) return;

    QVector<int> blackCheckers = logic.getBlackCheckers();
    if (blackCheckers.isEmpty()) {
        playerTurn = true;
        return;
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ö–æ–¥ –æ—Ç –¥–≤–∏–∂–∫–∞
    BotMove bm = logic.findBestMove(Qt::black);
    if (bm.checkerIndex >= 0) {
        logic.shoot(bm.checkerIndex, bm.force);
        playerTurn = true;
        return;
    }

    // fallback (–µ—Å–ª–∏ findBestMove –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    QVector<int> whiteCheckers = logic.getWhiteCheckers();

    float angleNoiseDeg = 18.0f;
    float forceNoisePct = 0.25f;
    int candidatesPerChecker = 3;
    switch (difficulty) {
    case Easy:   angleNoiseDeg = 40.0f; forceNoisePct = 0.5f;  candidatesPerChecker = 1; break;
    case Medium: angleNoiseDeg = 18.0f; forceNoisePct = 0.25f; candidatesPerChecker = 3; break;
    case Hard:   angleNoiseDeg = 6.0f;  forceNoisePct = 0.10f; candidatesPerChecker = 6; break;
    default: break;
    }

    struct Candidate { int checkerIndex; QPointF force; float score; };
    QVector<Candidate> candidates;
    candidates.reserve(blackCheckers.size() * candidatesPerChecker);

    for (int bi : blackCheckers) {
        if (!logic.isCheckerAlive(bi)) continue;

        QPointF startPos = logic.getCheckerPosition(bi);

        QPointF bestTarget = startPos;
        if (!whiteCheckers.isEmpty()) {
            float bestD = 1e9f;
            for (int wi : whiteCheckers) {
                QPointF wp = logic.getCheckerPosition(wi);
                float d = std::hypot(wp.x() - startPos.x(), wp.y() - startPos.y());
                if (d < bestD) { bestD = d; bestTarget = wp; }
            }
        } else {
            bestTarget = QPointF(startPos.x(), startPos.y() + 1.0f);
        }

        QPointF dir = bestTarget - startPos;
        float len = std::hypot(dir.x(), dir.y());
        if (len > 0.0f) dir /= len;
        else dir = QPointF(0.0f, 1.0f);

        for (int c = 0; c < candidatesPerChecker; ++c) {
            float frac = (candidatesPerChecker > 1) ? (float)c / (candidatesPerChecker - 1) : 0.5f;
            float angleOffset = (frac - 0.5f) * 2.0f * angleNoiseDeg;
            float angleRad = angleOffset * (3.14159265f / 180.0f);
            float cosA = std::cos(angleRad);
            float sinA = std::sin(angleRad);
            QPointF dirRot(dir.x()*cosA - dir.y()*sinA, dir.x()*sinA + dir.y()*cosA);

            float baseForce = qBound(80.0f, len * 0.8f, 300.0f);
            float rnd = static_cast<float>(QRandomGenerator::global()->generateDouble());
            float forceMult = baseForce * (1.0f - forceNoisePct * rnd);
            QPointF forceVec = dirRot * forceMult;

            const float BOT_MAX_FORCE = 500.0f;
            float fLen = std::hypot(forceVec.x(), forceVec.y());
            if (fLen > BOT_MAX_FORCE) forceVec *= (BOT_MAX_FORCE / fLen);

            float score = logic.evaluateMove(bi, forceVec);
            candidates.append({ bi, forceVec, score });
        }
    }

    if (candidates.isEmpty()) {
        playerTurn = true;
        return;
    }

    std::sort(candidates.begin(), candidates.end(), [](const Candidate &a, const Candidate &b){
        return a.score > b.score;
    });

    Candidate best = candidates.first();
    logic.shoot(best.checkerIndex, best.force);
    playerTurn = true;
}
