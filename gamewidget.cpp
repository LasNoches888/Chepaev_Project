#include "gamewidget.h"
#include <QPainter>
#include <QMouseEvent>
#include <QPushButton>
#include <cmath>
#include <QRandomGenerator>
#include <QDebug>

GameWidget::GameWidget(QWidget *parent)
    : QWidget(parent),
    logic(),
    dragging(false),
    playerTurn(true),
    selectedChecker(-1),
    menuButtonHovered(false)
{
    // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
    setMinimumSize(800, 800);
    setMouseTracking(true); // –í–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º—ã—à–∏

    // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å–∫—É
    updateBoardGeometry();
    logic.initBoard();

    connect(&gameTimer, &QTimer::timeout, this, &GameWidget::onFrame);
    gameTimer.start(16);
}

void GameWidget::updateBoardGeometry()
{
    int width = this->width();
    int height = this->height();

    // –î–æ—Å–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 80% –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º 400
    int minSide = qMin(width, height);
    int boardSize = qMax(400, static_cast<int>(minSide * 0.8));

    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–æ—Å–∫—É
    int boardLeft = (width - boardSize) / 2;
    int boardTop = (height - boardSize) / 2;

    // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–æ—Å–∫–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if (abs(logic.boardSize - boardSize) > 50.0f && !logic.isMoving()) {
        logic.boardLeft = boardLeft;
        logic.boardTop = boardTop;
        logic.boardSize = boardSize;
        logic.initBoard(); // –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    } else {
        logic.boardLeft = boardLeft;
        logic.boardTop = boardTop;
        logic.boardSize = boardSize;
    }

    qDebug() << "–ì–µ–æ–º–µ—Ç—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –û–∫–Ω–æ:" << width << "x" << height;
    qDebug() << "–î–æ—Å–∫–∞:" << boardLeft << boardTop << boardSize;
}

void GameWidget::onFrame()
{
    logic.update(0.016f);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —à–∞—à–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
    if (!logic.isMoving()) {
        if (logic.checkGameOver()) {
            QString winner = logic.winner();
            if (winner != "none") {
                emit gameEnded(winner);
            }
        } else if (!playerTurn) {
            // –•–æ–¥ –±–æ—Ç–∞
            makeBotMove();
        }
    }

    update();
}

void GameWidget::makeBotMove()
{
    if (playerTurn || logic.isMoving() || logic.checkGameOver()) {
        return;
    }

    auto blackCheckers = logic.getBlackCheckers();
    if (blackCheckers.empty()) {
        playerTurn = true;
        return;
    }

    // –ü—Ä–æ—Å—Ç–æ–π —Ö–æ–¥ –±–æ—Ç–∞
    int randomIndex = QRandomGenerator::global()->bounded(blackCheckers.size());
    int checkerIndex = blackCheckers[randomIndex];

    float angle = QRandomGenerator::global()->bounded(360);
    float rad = angle * 3.14159f / 180.0f;
    float forceValue = 100 + QRandomGenerator::global()->bounded(200);
    QPointF force(cos(rad) * forceValue, sin(rad) * forceValue);

    logic.shoot(checkerIndex, force);
    playerTurn = true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫—É
}

void GameWidget::paintEvent(QPaintEvent *)
{
    QPainter p(this);
    p.setRenderHint(QPainter::Antialiasing);

    // –§–æ–Ω
    p.fillRect(0, 0, width(), height(), QColor(60, 60, 80));

    // –û–ë–ù–û–í–õ–Ø–ï–ú –ì–ï–û–ú–ï–¢–†–ò–Æ –ü–ï–†–ï–î –û–¢–†–ò–°–û–í–ö–û–ô
    updateBoardGeometry();

    // –†–∏—Å—É–µ–º –¥–æ—Å–∫—É –∏ —à–∞—à–∫–∏
    logic.drawBoard(&p);

    // –õ–∏–Ω–∏—è –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
    if (dragging && selectedChecker >= 0 && logic.isCheckerAlive(selectedChecker)) {
        QPointF checkerPos = logic.getCheckerPosition(selectedChecker);
        p.setPen(QPen(Qt::red, 3, Qt::SolidLine, Qt::RoundCap));
        p.drawLine(checkerPos, currentMouse);

        // –°—Ç—Ä–µ–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ü–µ –ª–∏–Ω–∏–∏
        QPointF direction = currentMouse - checkerPos;
        float length = sqrt(direction.x()*direction.x() + direction.y()*direction.y());
        if (length > 0) {
            QPointF unitDir = direction / length;
            QPointF perpendicular(-unitDir.y(), unitDir.x());

            QPointF arrow1 = currentMouse - unitDir * 20 + perpendicular * 8;
            QPointF arrow2 = currentMouse - unitDir * 20 - perpendicular * 8;

            p.drawLine(currentMouse, arrow1);
            p.drawLine(currentMouse, arrow2);
        }
    }

    // –°—á–µ—Ç
    int whiteCount = logic.getWhiteCheckers().size();
    int blackCount = logic.getBlackCheckers().size();

    p.setPen(Qt::white);
    p.setFont(QFont("Arial", 14, QFont::Bold));

    // –§–æ–Ω –¥–ª—è —Å—á–µ—Ç–∞
    p.setBrush(QColor(0, 0, 0, 180));
    p.drawRect(10, 10, 200, 80);

    // –ë–µ–ª—ã–µ —à–∞—à–∫–∏
    p.setBrush(Qt::white);
    p.setPen(Qt::black);
    p.drawEllipse(20, 25, 20, 20);
    p.setPen(Qt::white);
    p.drawText(50, 40, QString("–ë–µ–ª—ã–µ: %1").arg(whiteCount));

    // –ß–µ—Ä–Ω—ã–µ —à–∞—à–∫–∏
    p.setBrush(Qt::black);
    p.setPen(Qt::black);
    p.drawEllipse(20, 55, 20, 20);
    p.setPen(Qt::white);
    p.drawText(50, 70, QString("–ß–µ—Ä–Ω—ã–µ: %1").arg(blackCount));

    // –ö–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é" - –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–π
    QRect menuButtonRect(width() - 130, 10, 120, 40);

    // Hover —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
    if (menuButtonHovered) {
        p.setBrush(QColor(255, 255, 255, 250));
    } else {
        p.setBrush(QColor(255, 255, 255, 200));
    }

    p.setPen(QPen(Qt::black, 2));
    p.drawRect(menuButtonRect);
    p.setPen(Qt::black);
    p.setFont(QFont("Arial", 12, QFont::Bold));
    p.drawText(menuButtonRect, Qt::AlignCenter, "–í –º–µ–Ω—é");

    // –ß–µ–π —Ö–æ–¥
    p.setPen(Qt::white);
    p.setFont(QFont("Arial", 16, QFont::Bold));
    QString turnText = playerTurn ? "üéØ –í–∞—à —Ö–æ–¥ (–±–µ–ª—ã–µ)" : "ü§ñ –•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (—á–µ—Ä–Ω—ã–µ)";
    QRect turnRect(width() / 2 - 150, height() - 50, 300, 30);
    p.drawText(turnRect, Qt::AlignCenter, turnText);
}

void GameWidget::mousePressEvent(QMouseEvent *e)
{
    if (e->button() != Qt::LeftButton) {
        return;
    }

    if (!playerTurn || logic.isMoving()) {
        return;
    }

    // –ü–†–û–í–ï–†–ö–ê –ö–ù–û–ü–ö–ò "–í –ú–ï–ù–Æ"
    QRect menuButtonRect(width() - 130, 10, 120, 40);
    if (menuButtonRect.contains(e->pos())) {
        emit backToMenuClicked();
        return;
    }

    selectedChecker = -1;
    const float cell = logic.boardSize / 8.0f;
    const float radius = cell * 0.4f;

    const auto& checkers = logic.getCheckers();
    for (int i = 0; i < checkers.size(); ++i) {
        const auto& c = checkers[i];
        if (!c->alive || c->color != Qt::white) continue;

        float dist = sqrt(pow(e->pos().x() - c->pos.x(), 2) + pow(e->pos().y() - c->pos.y(), 2));
        if (dist <= radius) {
            selectedChecker = i;
            break;
        }
    }

    if (selectedChecker >= 0) {
        dragging = true;
        dragStart = logic.getCheckerPosition(selectedChecker);
        currentMouse = e->pos();
        update();
    }
}

void GameWidget::mouseMoveEvent(QMouseEvent *e)
{
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ hover –¥–ª—è –∫–Ω–æ–ø–∫–∏
    QRect menuButtonRect(width() - 130, 10, 120, 40);
    bool wasHovered = menuButtonHovered;
    menuButtonHovered = menuButtonRect.contains(e->pos());

    if (wasHovered != menuButtonHovered) {
        update(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    }

    if (dragging && selectedChecker >= 0) {
        currentMouse = e->pos();
        update();
    }
}

void GameWidget::mouseReleaseEvent(QMouseEvent *e)
{
    if (e->button() != Qt::LeftButton) {
        return;
    }

    if (dragging && selectedChecker >= 0) {
        dragging = false;

        QPointF checkerPos = logic.getCheckerPosition(selectedChecker);
        QPointF direction = checkerPos - e->pos();
        float forceLength = sqrt(direction.x()*direction.x() + direction.y()*direction.y());

        if (forceLength > 10) {
            QPointF force = direction * 2.0f;
            logic.shoot(selectedChecker, force);
            playerTurn = false; // –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ –±–æ—Ç—É
        }

        selectedChecker = -1;
        update();
    }
}

void GameWidget::resizeEvent(QResizeEvent *event)
{
    QWidget::resizeEvent(event);
    updateBoardGeometry();
    update();
}

QSize GameWidget::sizeHint() const
{
    return QSize(800, 800);
}
